//! The client_service module provides ClientService, which encapsulates the underlying grpc server,
//! and converts requests to and from protocol buffers, bringing the api in line with the packybara
//! api.
//!
//! `ClientService` is the interface which clients will interact with.
use crate::{
    url as grpcurl, ChangesQueryReply, ChangesQueryRequest, ChangesQueryRow, Coords,
    DistributionsQueryReply, DistributionsQueryRequest, DistributionsQueryRow, LevelsQueryReply,
    LevelsQueryRequest, LevelsQueryRow, PackagesQueryReply, PackagesQueryRequest, PackagesQueryRow,
    PackybaraClient, PkgCoordsQueryReply, PkgCoordsQueryRequest, PkgCoordsQueryRow,
    PlatformsQueryReply, PlatformsQueryRequest, PlatformsQueryRow, RevisionsQueryReply,
    RevisionsQueryRequest, RevisionsQueryRow, RolesQueryReply, RolesQueryRequest, RolesQueryRow,
    SitesQueryReply, SitesQueryRequest, SitesQueryRow, VersionPinQueryReply,
    VersionPinQueryRequest, VersionPinWithsQueryReply, VersionPinWithsQueryRequest,
    VersionPinWithsQueryRow, VersionPinsQueryReply, VersionPinsQueryRequest, VersionPinsQueryRow,
    WithsQueryReply, WithsQueryRequest, WithsQueryRow,
};
use chrono::{DateTime, Local};
use packybara::db::find::versionpins::FindVersionPinsRow;
use packybara::db::find::withs::FindWithsRow;
use packybara::db::find_all::changes::ChangeAction;
use packybara::db::find_all::changes::FindAllChangesRow;
use packybara::db::find_all::distributions::FindAllDistributionsRow;
use packybara::db::find_all::levels::FindAllLevelsRow;
use packybara::db::find_all::packages::FindAllPackagesRow;
use packybara::db::find_all::pkgcoords::FindAllPkgCoordsRow;
use packybara::db::find_all::platforms::FindAllPlatformsRow;
use packybara::db::find_all::revisions::FindAllRevisionsRow;
use packybara::db::find_all::roles::FindAllRolesRow;
use packybara::db::find_all::sites::FindAllSitesRow;
use packybara::db::find_all::versionpin_withs::FindAllWithsRow;
use packybara::db::find_all::versionpins::FindAllVersionPinsRow;
use std::convert::TryFrom;
use std::str::FromStr;
use tonic::transport::{Channel, Endpoint};

pub mod changes;
pub use changes::*;

pub mod revisions;
pub use revisions::*;

pub mod withs;
pub use withs::*;

pub mod pkgcoords;
pub use pkgcoords::*;

pub mod distributions;
pub use distributions::*;

pub mod packages;
pub use packages::*;

pub mod platforms;
pub use platforms::*;

pub mod sites;
pub use sites::*;

pub mod roles;
pub use roles::*;

pub mod levels;
pub use levels::*;

pub mod versionpins;
pub use versionpins::*;

pub mod versionpin;
pub use versionpin::*;

pub mod versionpin_withs;
pub use versionpin_withs::*;

pub mod packages_xml;
pub use packages_xml::*;
// NOTE:: this has some implications for applications that want to communicate
// in multiple channels. If this becomes a requirement, we will have to
// put an arc around client
pub struct ClientService {
    client: PackybaraClient<Channel>,
}

impl ClientService {
    /// create a new client instance , given a url
    ///
    /// # Arguments
    ///
    /// * `url` - An instance of GrpcUrl
    ///
    /// # Returns
    /// * Result wrapping
    ///   * ClientService instance if successful
    ///   * std::error::Error otherwise
    pub async fn new(url: grpcurl::GrpcUrl) -> Result<Self, Box<dyn std::error::Error>> {
        let url = url.as_str().to_string();
        let endpoint = Endpoint::try_from(url)?;
        let client = PackybaraClient::connect(endpoint).await?;
        Ok(ClientService { client })
    }

    /// Retrieve a PackybaraClient reference . The `PackybaraClient` is the underlying
    /// client generated by the rust grpc compiler.
    pub fn client(&self) -> &PackybaraClient<Channel> {
        &self.client
    }

    /// Retrieve a mutable PackybaraClient reference. The `PackybaraClient` is the underlying
    /// client generated by the rust grpc compiler
    pub fn client_mut(&mut self) -> &mut PackybaraClient<Channel> {
        &mut self.client
    }
    /// Retrieve versionpin from server, given GetVersionPinOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - get_versionpin::Options instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - FindVersionPinsRow
    /// - Err - Boxed std::error::Error
    ///
    /// # Example
    ///
    /// ```ignore
    /// let results = client.get_version_in(GetVersionPinOptions::new("maya").role("model")).await?;
    /// ```
    pub async fn get_version_pin(
        &mut self,
        options: get_versionpin::Options,
    ) -> Result<FindVersionPinsRow, Box<dyn std::error::Error>> {
        get_versionpin::cmd(self, options).await
    }
    /// Retrieve a vector of versionpins from server, given GetVersionPinsOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - get_versionpins::Options instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - Vec<FindVersionPinsRow>
    /// - Err - Boxed std::error::Error
    ///
    pub async fn get_version_pins(
        &mut self,
        options: get_versionpins::Options,
    ) -> Result<Vec<FindAllVersionPinsRow>, Box<dyn std::error::Error>> {
        get_versionpins::cmd(self, options).await
    }
    /// Retrieve a vector of Withs for the supplied verion pin from the server, given GetVersionPinWithsOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - get_versionpin_withs::Options instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - Vec<FindAllWithsRow>
    /// - Err - Boxed std::error::Error
    ///
    pub async fn get_version_pin_withs(
        &mut self,
        versionpin_id: i64,
    ) -> Result<Vec<FindAllWithsRow>, Box<dyn std::error::Error>> {
        get_versionpin_withs::cmd(self, versionpin_id).await
    }
    /// Retrieve a vector of Levels from the server, given GetLevelsOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `get_levels::Options` instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `Vec<FindAllWithsRow>`
    /// - Err - `Boxed std::error::Error`
    pub async fn get_levels(
        &mut self,
        options: get_levels::Options,
    ) -> Result<Vec<FindAllLevelsRow>, Box<dyn std::error::Error>> {
        get_levels::cmd(self, options).await
    }

    /// Retrieve a vector of Sites from the server, given GetSitesOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `get_sites::Options` instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `Vec<FindAllSitesRow>`
    /// - Err - `Boxed std::error::Error`
    pub async fn get_sites(
        &mut self,
        options: get_sites::Options,
    ) -> Result<Vec<FindAllSitesRow>, Box<dyn std::error::Error>> {
        get_sites::cmd(self, options).await
    }

    /// Retrieve a vector of Roles from the server, given GetRolesOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `get_roles::Options` instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `Vec<FindAllRolesRow>`
    /// - Err - `Boxed std::error::Error`
    pub async fn get_roles(
        &mut self,
        options: get_roles::Options,
    ) -> Result<Vec<FindAllRolesRow>, Box<dyn std::error::Error>> {
        get_roles::cmd(self, options).await
    }

    /// Retrieve a vector of Platforms from the server, given GetPlatformsOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `get_platforms::Options` instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `Vec<FindAllPlatformsRow>`
    /// - Err - `Boxed std::error::Error`
    pub async fn get_platforms(
        &mut self,
        options: get_platforms::Options,
    ) -> Result<Vec<FindAllPlatformsRow>, Box<dyn std::error::Error>> {
        get_platforms::cmd(self, options).await
    }

    /// Retrieve a vector of Packages from the server, given GetPackagesOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `get_packages::Options` instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `Vec<FindAllPackagesRow>`
    /// - Err - `Boxed std::error::Error`
    pub async fn get_packages(
        &mut self,
        options: get_packages::Options,
    ) -> Result<Vec<FindAllPackagesRow>, Box<dyn std::error::Error>> {
        get_packages::cmd(self, options).await
    }

    /// Retrieve a vector of Distributions from the server, given GetDistributionsOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `get_distributions::Options` instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `Vec<FindAllDistributionsRow>`
    /// - Err - `Boxed std::error::Error`
    pub async fn get_distributions(
        &mut self,
        options: get_distributions::Options,
    ) -> Result<Vec<FindAllDistributionsRow>, Box<dyn std::error::Error>> {
        get_distributions::cmd(self, options).await
    }

    /// Retrieve a vector of PkgCoords from the server, given GetPkgCoordsOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `get_pkgcoords::Options` instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `Vec<FindAllPkgCoordsRow>`
    /// - Err - `Boxed std::error::Error`
    pub async fn get_pkgcoords(
        &mut self,
        options: get_pkgcoords::Options,
    ) -> Result<Vec<FindAllPkgCoordsRow>, Box<dyn std::error::Error>> {
        get_pkgcoords::cmd(self, options).await
    }

    /// Retrieve a vector of withs from the server, given GetWithsOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `get_withs::Options` instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `Vec<FindWithsRow>`
    /// - Err - `Boxed std::error::Error`
    pub async fn get_withs(
        &mut self,
        options: get_withs::Options,
    ) -> Result<Vec<FindWithsRow>, Box<dyn std::error::Error>> {
        get_withs::cmd(self, options).await
    }

    /// Retrieve a vector of Revisions from the server, given GetRevisionsOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `get_withs::Options` instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `Vec<FindAllRevisionsRow>`
    /// - Err - `Boxed std::error::Error`
    pub async fn get_revisions(
        &mut self,
        options: get_revisions::Options,
    ) -> Result<Vec<FindAllRevisionsRow>, Box<dyn std::error::Error>> {
        get_revisions::cmd(self, options).await
    }

    /// Retrieve a vector of Changes from the server, given GetChangesOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `get_changes::Options` instance, encapsulating the query parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `Vec<FindAllChangesRow>`
    /// - Err - `Boxed std::error::Error`
    pub async fn get_changes(
        &mut self,
        options: get_changes::Options,
    ) -> Result<Vec<FindAllChangesRow>, Box<dyn std::error::Error>> {
        get_changes::cmd(self, options).await
    }

    //-----------------------------
    //            ADD

    /// Add a Package whose parameters are defined by the AddPackagesOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `add_packages::Options` instance, encapsulating the creation parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `u64` count of number of created instances
    /// - Err - `Boxed std::error::Error`
    pub async fn add_packages(
        &mut self,
        options: add_packages::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_packages::cmd(self, options).await
    }

    /// Add one or more `Level`s whose parameters are defined by the AddLevelsOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `add_levels::Options` instance, encapsulating the creation parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `u64` count of number of created instances
    /// - Err - `Boxed std::error::Error`
    pub async fn add_levels(
        &mut self,
        options: add_levels::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_levels::cmd(self, options).await
    }

    /// Add one or more `Role`s whose parameters are defined by the AddRolesOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `add_roles::Options` instance, encapsulating the creation parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `u64` count of number of created instances
    /// - Err - `Boxed std::error::Error`
    pub async fn add_roles(
        &mut self,
        options: add_roles::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_roles::cmd(self, options).await
    }

    /// Add one or more `Platform`s whose parameters are defined by the AddPackagesOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `add_packages::Options` instance, encapsulating the creation parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `u64` count of number of created instances
    /// - Err - `Boxed std::error::Error`
    pub async fn add_platforms(
        &mut self,
        options: add_platforms::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_platforms::cmd(self, options).await
    }

    /// Add one or more Sites whose parameters are defined by the AddSitesOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `add_sites::Options` instance, encapsulating the creation parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `u64` count of number of created instances
    /// - Err - `Boxed std::error::Error`
    pub async fn add_sites(
        &mut self,
        options: add_sites::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_sites::cmd(self, options).await
    }

    /// Add one or more Withs whose parameters are defined by the AddWithsOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `add_withs::Options` instance, encapsulating the creation parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `u64` count of number of created instances
    /// - Err - `Boxed std::error::Error`
    pub async fn add_withs(
        &mut self,
        options: add_withs::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_withs::cmd(self, options).await
    }

    /// Add one or more VersionPins whose parameters are defined by the AddVersionPinsOptions instance
    ///
    /// # Arguments
    ///
    /// * `options` - `add_versionpins::Options` instance, encapsulating the creation parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `u64` count of number of created instances
    /// - Err - `Boxed std::error::Error`
    pub async fn add_versionpins(
        &mut self,
        options: add_versionpins::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_versionpins::cmd(self, options).await
    }

    //--------------------------------
    // export

    /// Export a packages.xml to the supplied location for the given show
    ///
    /// # Arguments
    ///
    /// * `options` - `export_packagesxml::Options` instance, encapsulating the creation parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `u64` count of number of created instances
    /// - Err - `Boxed std::error::Error`
    pub async fn export_packagesxml(
        &mut self,
        options: export_packagesxml::Options,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        export_packagesxml::cmd(self, options).await
    }

    //---------------------------------
    // set

    /// update the supplied versionppin or pins with new state defined in the setPversionpins::Options
    ///
    /// # Arguments
    ///
    /// * `options` - `set_versionpins::Options` instance, encapsulating the creation parameters
    ///   
    /// # Returns
    ///
    /// * Result
    /// - Ok - `bool` indicating success
    /// - Err - `Boxed std::error::Error`
    pub async fn set_versionpins(
        &mut self,
        options: set_versionpins::Options,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        set_versionpins::cmd(self, options).await
    }
}
