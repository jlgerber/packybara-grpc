//! The client_service module provides ClientService, which encapsulates the underlying grpc server,
//! and converts requests to and from protocol buffers, bringing the api in line with the packybara
//! api.
//!
//! `ClientService` is the interface which clients will interact with.
use crate::{
    url as grpcurl, ChangesQueryReply, ChangesQueryRequest, ChangesQueryRow, Coords,
    DistributionsQueryReply, DistributionsQueryRequest, DistributionsQueryRow, LevelsQueryReply,
    LevelsQueryRequest, LevelsQueryRow, PackagesQueryReply, PackagesQueryRequest, PackagesQueryRow,
    PackybaraClient, PkgCoordsQueryReply, PkgCoordsQueryRequest, PkgCoordsQueryRow,
    PlatformsQueryReply, PlatformsQueryRequest, PlatformsQueryRow, RevisionsQueryReply,
    RevisionsQueryRequest, RevisionsQueryRow, RolesQueryReply, RolesQueryRequest, RolesQueryRow,
    SitesQueryReply, SitesQueryRequest, SitesQueryRow, VersionPinQueryReply,
    VersionPinQueryRequest, VersionPinWithsQueryReply, VersionPinWithsQueryRequest,
    VersionPinWithsQueryRow, VersionPinsQueryReply, VersionPinsQueryRequest, VersionPinsQueryRow,
    WithsQueryReply, WithsQueryRequest, WithsQueryRow,
};
use chrono::{DateTime, Local};
use packybara::db::find::versionpins::FindVersionPinsRow;
use packybara::db::find::withs::FindWithsRow;
use packybara::db::find_all::changes::ChangeAction;
use packybara::db::find_all::changes::FindAllChangesRow;
use packybara::db::find_all::distributions::FindAllDistributionsRow;
use packybara::db::find_all::levels::FindAllLevelsRow;
use packybara::db::find_all::packages::FindAllPackagesRow;
use packybara::db::find_all::pkgcoords::FindAllPkgCoordsRow;
use packybara::db::find_all::platforms::FindAllPlatformsRow;
use packybara::db::find_all::revisions::FindAllRevisionsRow;
use packybara::db::find_all::roles::FindAllRolesRow;
use packybara::db::find_all::sites::FindAllSitesRow;
use packybara::db::find_all::versionpin_withs::FindAllWithsRow;
use packybara::db::find_all::versionpins::FindAllVersionPinsRow;
use std::convert::TryFrom;
use std::str::FromStr;
use tonic::transport::{Channel, Endpoint};

pub mod changes;
pub use changes::*;

pub mod revisions;
pub use revisions::*;

pub mod withs;
pub use withs::*;

pub mod pkgcoords;
pub use pkgcoords::*;

pub mod distributions;
pub use distributions::*;

pub mod packages;
pub use packages::*;

pub mod platforms;
pub use platforms::*;

pub mod sites;
pub use sites::*;

pub mod roles;
pub use roles::*;

pub mod levels;
pub use levels::*;

pub mod versionpins;
pub use versionpins::*;

pub mod versionpin;
pub use versionpin::*;

pub mod versionpin_withs;
pub use versionpin_withs::*;

pub mod packages_xml;
pub use packages_xml::*;
// NOTE:: this has some implications for applications that want to communicate
// in multiple channels. If this becomes a requirement, we will have to
// put an arc around client
/// Api entry point for client code, ClientService implements methods that encapsulate communcation with
/// the server. ClientService methods generally take a mutable reference to self, along with an
/// options struct, defined in a namespace matching the name of the method.
///
/// # Example
/// ```
/// # async fn dox() -> std::io::Result<()>
/// use packybara_gpi::client_service::get_changes;
/// use packybara_gpi::ClientService;
///
/// let client = ClientService::new().await?;
/// let changes = client.get_changes(
///     get_changes::Options::new().transaction_id_opt(Some(2345))
/// ).await?;
///
/// # Ok(())
/// # }
/// ```
pub struct ClientService {
    client: PackybaraClient<Channel>,
}

impl ClientService {
    /// create a new client instance , given a url
    pub async fn new(url: grpcurl::GrpcUrl) -> Result<Self, Box<dyn std::error::Error>> {
        let url = url.as_str().to_string();
        let endpoint = Endpoint::try_from(url)?;
        let client = PackybaraClient::connect(endpoint).await?;
        Ok(ClientService { client })
    }

    /// Retrieve a PackybaraClient reference . The `PackybaraClient` is the underlying
    /// client generated by the rust grpc compiler.
    pub fn client(&self) -> &PackybaraClient<Channel> {
        &self.client
    }

    /// Retrieve a mutable PackybaraClient reference. The `PackybaraClient` is the underlying
    /// client generated by the rust grpc compiler
    pub fn client_mut(&mut self) -> &mut PackybaraClient<Channel> {
        &mut self.client
    }
    /// Retrieve versionpin from server, given GetVersionPinOptions instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_versionpin;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_version_pin(
    ///     get_versionpin::Options::new("maya")
    ///     .role_opt(Some("model")))
    ///     .await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_version_pin(
        &mut self,
        options: get_versionpin::Options,
    ) -> Result<FindVersionPinsRow, Box<dyn std::error::Error>> {
        get_versionpin_impl::cmd(self, options).await
    }
    /// Retrieve a vector of versionpins from server, given get_versionpin::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_versionpins;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_version_pins(
    ///     get_versonpins::Option::new("maya")
    ///     .role_opt(Some("model")))
    ///     .await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_version_pins(
        &mut self,
        options: get_versionpins::Options,
    ) -> Result<Vec<FindAllVersionPinsRow>, Box<dyn std::error::Error>> {
        get_versionpins_impl::cmd(self, options).await
    }
    /// Retrieve a vector of Withs for the supplied verion pin from the server, given a versionpin_id
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_version_pin_withs(12345).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_version_pin_withs(
        &mut self,
        versionpin_id: i64,
    ) -> Result<Vec<FindAllWithsRow>, Box<dyn std::error::Error>> {
        get_versionpin_withs::cmd(self, versionpin_id).await
    }
    /// Retrieve a vector of Levels from the server, given get_levels::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_levels;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_levels(
    ///     get_levels::Option::new()
    ///         .level_opt(Some("dev01"))
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_levels(
        &mut self,
        options: get_levels::Options,
    ) -> Result<Vec<FindAllLevelsRow>, Box<dyn std::error::Error>> {
        get_levels_impl::cmd(self, options).await
    }

    /// Retrieve a vector of Sites from the server, given get_sites::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_sites;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_sites(
    ///     get_versonpin::Option::new("maya")
    ///         .name_opt(Some("playa"))
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_sites(
        &mut self,
        options: get_sites::Options,
    ) -> Result<Vec<FindAllSitesRow>, Box<dyn std::error::Error>> {
        get_sites_impl::cmd(self, options).await
    }

    /// Retrieve a vector of Roles from the server, given Get_roles::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_roles;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_roles(
    ///     get_roles::Option::new()
    ///         .category_opt(Some("subcategory"))
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_roles(
        &mut self,
        options: get_roles::Options,
    ) -> Result<Vec<FindAllRolesRow>, Box<dyn std::error::Error>> {
        get_roles_impl::cmd(self, options).await
    }

    /// Retrieve a vector of Platforms from the server, given get_platforms::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_platforms;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_platforms(
    ///     get_platforms::Option::new()
    ///         .name_opt(Some("model"))
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_platforms(
        &mut self,
        options: get_platforms::Options,
    ) -> Result<Vec<FindAllPlatformsRow>, Box<dyn std::error::Error>> {
        get_platforms_impl::cmd(self, options).await
    }

    /// Retrieve a vector of Packages from the server, given get_packages::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_packages;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_packages(
    ///     get_packages::Option::new()
    ///         .name_opt(Some("maya%"))
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_packages(
        &mut self,
        options: get_packages::Options,
    ) -> Result<Vec<FindAllPackagesRow>, Box<dyn std::error::Error>> {
        get_packages_impl::cmd(self, options).await
    }

    /// Retrieve a vector of Distributions from the server, given get_distributions::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_distributions;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_distributions(
    ///     get_distributions::Option::new()
    ///         .package_opt(Some("modelpipeline"))
    ///         .version_opt(Some("2.3.1"))
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_distributions(
        &mut self,
        options: get_distributions::Options,
    ) -> Result<Vec<FindAllDistributionsRow>, Box<dyn std::error::Error>> {
        get_distributions_impl::cmd(self, options).await
    }

    /// Retrieve a vector of PkgCoords from the server, given get_pkgcoords::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_pkgcoords;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_pkgcoords(
    ///     get_pkgcoords::Option::new()
    ///         .package_opt(Some("maya"))
    ///         .level_opt(Some("dev01"))
    ///         .platform_opt(Some("cent7_64"))
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_pkgcoords(
        &mut self,
        options: get_pkgcoords::Options,
    ) -> Result<Vec<FindAllPkgCoordsRow>, Box<dyn std::error::Error>> {
        get_pkgcoords_impl::cmd(self, options).await
    }

    /// Retrieve a vector of withs from the server, given get_withs::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_withs;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_withs(
    ///     get_withs::Option::new()
    ///     .package_opt(Some("maya%"))
    ///         .level_opt(Some("dev01"))
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_withs(
        &mut self,
        options: get_withs::Options,
    ) -> Result<Vec<FindWithsRow>, Box<dyn std::error::Error>> {
        get_withs_impl::cmd(self, options).await
    }

    /// Retrieve a vector of Revisions from the server, given get_revisions::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_revisions;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_revisions(
    ///     get_revisions::Option::new()
    ///         .transaction_id_opt(Some(15332))
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_revisions(
        &mut self,
        options: get_revisions::Options,
    ) -> Result<Vec<FindAllRevisionsRow>, Box<dyn std::error::Error>> {
        get_revisions_impl::cmd(self, options).await
    }

    /// Retrieve a vector of Changes from the server, given get_changes::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::get_changes;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.get_changes(
    ///     get_changes::Option::new()
    ///         .transaction_id_opt(Some(54321))
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn get_changes(
        &mut self,
        options: get_changes::Options,
    ) -> Result<Vec<FindAllChangesRow>, Box<dyn std::error::Error>> {
        get_changes_impl::cmd(self, options).await
    }

    //-----------------------------
    //            ADD
    //-----------------------------
    /// Add a Package whose parameters are defined by the add_packages::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::add_packages;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.add_packages(
    ///     add_packages::Option::new(vec!["maya", "nuke"], "jgerber")
    ///         .comment_opt(Some("adding maya nad nuke as packages")))
    ///     .await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn add_packages(
        &mut self,
        options: add_packages::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_packages_impl::cmd(self, options).await
    }

    /// Add one or more `Level`s whose parameters are defined by the add_levels::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::add_levels;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.add_levels(
    ///     add_levels::Option::new(vec!["dev01", "dev02"], "jgerber")
    ///         .comment_opt(Some("adding levels")))
    ///     .await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn add_levels(
        &mut self,
        options: add_levels::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_levels_impl::cmd(self, options).await
    }

    /// Add one or more `Role`s whose parameters are defined by the add_roles::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::add_roles;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.add_roles(
    ///     add_roles::Option::new(vec!["model", "anim"], "jgerber")
    ///         .comment_opt(Some("adding model and anim roles")))
    ///     .await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn add_roles(
        &mut self,
        options: add_roles::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_roles_impl::cmd(self, options).await
    }

    /// Add one or more`Platform`s whose parameters are defined by the add_platforms::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::add_packages;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.add_platforms(
    ///     add_platforms::Option::new(vec!["cent6_64", "cent7_64"], "jgerber")
    ///         .comment_opt(Some("adding platforms")))
    ///     .await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn add_platforms(
        &mut self,
        options: add_platforms::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_platforms_impl::cmd(self, options).await
    }

    /// Add one or more Sites whose parameters are defined by the add_sites::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::add_packages;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.add_sites(
    ///     add_sites::Option::new(vec!["portland", "montreal"], "jgerber")
    ///         .comment_opt(Some("adding sites")))
    ///     .await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn add_sites(
        &mut self,
        options: add_sites::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_sites_impl::cmd(self, options).await
    }

    /// Add one or more Withs whose parameters are defined by the add_withs::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::add_withs;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.add_withs(
    ///     add_withs::Option::new(23456, vec!["portland", "montreal"], "jgerber")
    ///         .comment_opt(Some("adding withs")))
    ///     .await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn add_withs(
        &mut self,
        options: add_withs::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_withs_impl::cmd(self, options).await
    }

    /// Add one or more VersionPins whose parameters are defined by the add_versionpins::Options instance
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::add_versionpins;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.add_versionpins(
    ///     add_versionpins::Option::new("modelpipeline-3.2.1", "jgerber")
    ///         .levels(vec!["dev01","plasma"])
    ///         .roles(vec!["model_beta", "model_alpha"])
    ///         .platforms(vec!["cent7_64"])
    ///         .sites(vec!["portland", "hyderabad", "montreal"])
    ///         .comment_opt(Some("adding versionpin"))
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn add_versionpins(
        &mut self,
        options: add_versionpins::Options,
    ) -> Result<u64, Box<dyn std::error::Error>> {
        add_versionpins_impl::cmd(self, options).await
    }

    //--------------------------------
    //            export
    //--------------------------------
    /// Export a packages.xml to the supplied location for the given show
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::export_packagesxml;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.export_packagesxml(
    ///         export_packagesxml::Option::new("dev01", "/tmp/packages.xml")
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn export_packagesxml(
        &mut self,
        options: export_packagesxml::Options,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        export_packagesxml_impl::cmd(self, options).await
    }

    //---------------------------------
    //              set
    //---------------------------------
    //
    /// update the supplied versionppin or pins with new state defined in the set_versionpins::Options
    ///
    /// # Example
    /// ```
    /// # async fn dox() -> std::io::Result<()> {
    /// use packybara::ClientService;
    /// use packybara::set_versionpins;
    ///
    /// let client = ClientService::new().await?;
    /// let results = client.set_versionpins(
    ///         set_versionpins::Option::new(
    ///             vec![1234],
    ///             vec![3211],
    ///             "jgerber",
    ///             "updating vpins")
    ///     ).await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn set_versionpins(
        &mut self,
        options: set_versionpins::Options,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        set_versionpins_impl::cmd(self, options).await
    }
}
